# let st = create ();;;;
val st : M.t = <abstr>
# add st "abra";;
- : M.strid = 1
# tree st;;
- : M.tree =

Node ("", 1, [1],
   [Leaf ("ra", (1, 2)); 
    Leaf ("bra", (1, 1));
    Node ("a", 0, [1], 
      [Leaf ("", (1, 3)); 
       Leaf ("bra", (1, 0))
      ]
    )
  ]
)

# let st = create ();;;;
val st : M.t = <abstr>
# add st "a";;
- : M.strid = 1
# tree st;;
- : M.tree = Node ("", 1, [1], [Leaf ("a", (1, 0))])
# add st "b";;
- : M.strid = 2
# tree st;;
- : M.tree = Node ("", 2, [2; 1], [Leaf ("b", (2, 0)); Leaf ("a", (1, 0))])
# add st "ab";;
- : M.strid = 3
# tree st;;
- : M.tree =
Node ("", 3, [3; 2; 1],
 [Node ("b", 3, [3; 2], [Leaf ("", (3, 1)); Leaf ("", (2, 0))]);
  Node ("a", 3, [3; 1], [Leaf ("b", (3, 0)); Leaf ("", (1, 0))])])


# T.add s1 (Intseq.of_array [|1;2;3|]);;
- : T.strid = 1
# T.add s1 (Intseq.of_array [|1;2;4|]);;
- : T.strid = 2
# T.tree s1;;
- : T.tree =
T.Node ("", 2, [2; 1],
 [T.Leaf ("[|4|]", (2, 2)); T.Leaf ("[|3|]", (1, 2));
  T.Node ("[|2|]", 0, [2; 1],
   [T.Leaf ("[|4|]", (2, 1)); T.Leaf ("[|3|]", (1, 1))]);
  T.Node ("[|1;2|]", 2, [2; 1],
   [T.Leaf ("[|4|]", (2, 0)); T.Leaf ("[|3|]", (1, 0))])])
